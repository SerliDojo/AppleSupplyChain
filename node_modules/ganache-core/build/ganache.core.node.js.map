{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/external \"ethereumjs-tx/fake.js\"","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/./lib/utils/txhelper.js","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"crypto\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"fs\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/external \"ethereumjs-vm\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"web3-eth\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/external \"bn.js\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","Transaction","hex","val","indexOf","trim","BN","intToHex","toString","addHexPrefix","txHash","tx","getBuffer","hash","Buffer","alloc","rpcQuantityHexString","this","replace","rpcDataHexString","length","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","result","vm","exception","reason","returnData","return","slice","rawDecode","error","exceptionError","program_counter","runState","programCounter","exceptionResult","message","count","fromResults","Log","data","self","forEach","toJSON","logIndex","transactionIndex","transactionHash","blockHash","block","blockNumber","header","address","topics","type","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","inclSig","equals","from","map","log","v","LevelUpOutOfRangeError","[object Object]","index","len","super","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","arguments","eth","shh","bzz","setProvider","provider","net","addProviders","FakeTransaction","resultJSON","nonce","gas","gasLimit","gasPrice","input","fromJSON","json","buf","setLengthLeft","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","options","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","isArray","intermediary","response","reportErrorInResponse","JSON","stringify","split","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","_isTransactionRequest","request","method","_typeof","iterator","obj","ethUtil","crypto","scryptsy","uuidv4","bs58check","assert","msg","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","randomBytes","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","sha3","id","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","decode","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","Database","Trie","VM","async","Heap","BlockchainDouble","database","console","pending_transactions","_latestStateRoot","undefined","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","time","debug","allowUnlimitedContractSize","assign","getVM","getStateTrie","getBlock","done","e","enableHomestead","activatePrecompiles","info","opcode","argsNum","in","arg","getLatestStateRoot","trie_db","initialize","accounts","latestBlock","setTime","createGenesisBlock","eachSeries","accountData","finished","putAccount","account","stateRoot","stateManager","trie","putBlock","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","set","transactionReceipts","parallel","popBlock","parentHash","parent","del","pop","series","clearPendingTransactions","_putAccount","cache","flush","getParent","parentNumber","currentTime","getQueuedNonce","pendingNonce","queueTransaction","sortByPriceAndNonce","sortedByNonce","nonceSort","a","b","sort","heap","sortedTransactions","size","best","processCall","cleanUpAndReturn","revert","revertErr","runCall","checkpoint","runArgs","skipBalance","skipNonce","runTx","vmerr","processBlock","commit","cleanup","runBlock","totalBlockGasUsage","receipt","txLogs","receiptLog","j","rcpt","toArrayLike","createdAddress","bloom","bitvector","cb","commmitIfNeeded","processNextBlock","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","returnValue","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","beforeTxListener","afterTxListener","removeListener","getTransactionReceipt","targetBlock","getContractStorage","getAccount","exists","getNonce","getBalance","balance","getStorage","position","getCode","code","getTransaction","notFound","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","encode","encoded","_isRawTx","txhelper","includeFullTransactions","mixHash","sha3Uncles","uncleHash","transactionsRoot","transactionsTrie","receiptsRoot","receiptTrie","miner","coinbase","difficulty","totalDifficulty","extraData","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","sign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","evm_increaseTime","evm_setTime","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","sigUtil","TXRejectedError","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","network_id","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","forkVersion","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","stripHexPrefix","txParams","processNextAction","override","queued","rlp","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","types","EIP712Domain","domain","primaryType","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasRefund","add","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","isUnlocked","expectedNonce","expected","actual","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","finishInitializing","db","db_path","dir","getDir","directory","maxSize","valueEncoding","Sublevel","serializer","sublevel","_get","_put","put","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","fs","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","ForkedStorageTrie","forkBlockNumber","providers","HttpProvider","storageTrieCache","getId","_lookupStorageTrie","lookupStorageTrie","_lookupAccount","_getAccount","getContractCode","_getCode","putContractCode","_putCode","createForkedStorageTrie","stateTrie","isFallbackBlock","isBlockHash","isBuffer","isFallbackBlockHash","getFallbackBlock","numberOrHash","toBN","transactionTrie","getRelativeBlockNumber","blockReference","keyExists","fetchCodeFromFallback","setCode","serialize","acc","fetchAccountFromFallback","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","getSafeFallbackBlockNumber","safeBlockNumber","relative","currentProvider","jsonrpc","_checkpointTrie","customCheckpoint","_revertTrie","checkpoints","customRevert","MerklePatriciaTree","findPath","node","remainder","getStorageAt","rng","alphabet","text","charAt","Math","floor","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","Promise","resolve","once","then","_isRunning","newBlock","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","subscriptions","utf8Data","reject","subscriptionId","subscription","http","createServer","body","chunk","headers","Access-Control-Allow-Headers","Access-Control-Allow-Origin","Access-Control-Allow-Methods","writeHead","Content-Type","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","let utils = require(\"ethereumjs-util\");\nlet Transaction = require(\"ethereumjs-tx\");\n\nmodule.exports = {\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    }\n\n    // Support Buffer, BigInteger and BN library\n    // Hint: BN is used in ethereumjs\n    if (typeof val === \"object\") {\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  txHash: function(tx, getBuffer = false) {\n    let txHash;\n\n    if (typeof tx.hash === \"function\") {\n      // If signed transaction dont use signature for hash\n      // For FakeTransaction/Transaction compatibility\n      if (tx instanceof Transaction) {\n        txHash = tx.hash(false);\n      } else {\n        txHash = tx.hash();\n      }\n    } else {\n      txHash = Buffer.alloc(0);\n    }\n\n    return getBuffer ? txHash : utils.addHexPrefix(txHash.toString(\"hex\"));\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    val = \"0x\" + val.replace(\"0x\", \"\").replace(/^0+/, \"\");\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    const rpcDataHex = this.rpcDataHexString(val, length);\n    return rpcDataHex === \"0x\" ? null : rpcDataHex;\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    const rpcQuantityHex = this.rpcQuantityHexString(val, length);\n    return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  }\n};\n","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.vm.exception !== 1) {\n        var hash = to.txHash(tx);\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.vm.return;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.vm.exceptionError.error || result.vm.exceptionError,\n          program_counter: result.vm.runState.programCounter,\n          return: to.hex(result.vm.return),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","module.exports = require(\"ethereumjs-tx/fake.js\");","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\r\n\r\n// Expects:\r\n//\r\n// logIndex: ...\r\n// transactionIndex: ...\r\n// transactionHash: ...\r\n// block: ...\r\n// address: ...\r\n// data: ...\r\n// topics: ...\r\n// type: ...\r\n\r\nfunction Log(data) {\r\n  var self = this;\r\n  Object.keys(data).forEach(function(key) {\r\n    self[key] = data[key];\r\n  });\r\n}\r\n\r\nLog.prototype.toJSON = function() {\r\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\r\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\r\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\r\n  return {\r\n    logIndex: to.rpcQuantityHexString(this.logIndex),\r\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\r\n    transactionHash: to.rpcDataHexString(this.transactionHash),\r\n    blockHash: to.rpcDataHexString(this.block.hash()),\r\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\r\n    address: to.rpcDataHexString(this.address),\r\n    data: to.rpcDataHexString(this.data),\r\n    topics: this.topics,\r\n    type: \"mined\"\r\n  };\r\n};\r\n\r\nmodule.exports = Log;\r\n","var to = require(\"./to\");\nvar Transaction = require(\"ethereumjs-tx\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  let inclSig = !(tx instanceof Transaction);\n  this.txHash = tx.hash(inclSig);\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash(inclSig).equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcDataHexString(this.tx.v),\n    r: to.rpcDataHexString(this.tx.r),\n    s: to.rpcDataHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","var to = require(\"./to\");\nvar FakeTransaction = require(\"ethereumjs-tx/fake.js\");\nvar utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  toJSON: function(tx, block) {\n    var transactionIndex = 0;\n    for (var i = 0; i < block.transactions.length; i++) {\n      var current = block.transactions[i];\n      if (current.hash().equals(tx.hash())) {\n        transactionIndex = i;\n        break;\n      }\n    }\n    var resultJSON = {\n      hash: to.nullableRpcDataHexString(to.txHash(tx)),\n      nonce: to.rpcQuantityHexString(tx.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.rpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(tx.from),\n      to: to.nullableRpcDataHexString(tx.to),\n      value: to.rpcQuantityHexString(tx.value),\n      gas: to.rpcQuantityHexString(tx.gasLimit),\n      gasPrice: to.rpcQuantityHexString(tx.gasPrice),\n      input: to.rpcDataHexString(tx.data)\n    };\n\n    if (tx.v && tx.v.length > 0 && tx.r && tx.r.length > 0 && tx.s && tx.s.length > 0) {\n      resultJSON.v = to.hex(tx.v);\n      resultJSON.r = to.hex(tx.r);\n      resultJSON.s = to.hex(tx.s);\n    }\n\n    return resultJSON;\n  },\n\n  fromJSON: function(json) {\n    var tx = new FakeTransaction({\n      nonce: utils.toBuffer(to.hex(json.nonce)),\n      from: utils.toBuffer(to.hex(json.from)),\n      value: utils.toBuffer(to.hex(json.value)),\n      gasLimit: utils.toBuffer(to.hex(json.gas)),\n      gasPrice: utils.toBuffer(to.hex(json.gasPrice)),\n      data: utils.toBuffer(to.hex(json.input))\n    });\n\n    if (json.v && json.v.length > 0 && json.r && json.r.length > 0 && json.s && json.s.length > 0) {\n      tx.v = utils.toBuffer(to.hex(json.v));\n      tx.r = utils.toBuffer(to.hex(json.r));\n      tx.s = utils.toBuffer(to.hex(json.s));\n    }\n\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      var buf = utils.toBuffer(to.hex(json.to));\n      if (!buf.equals(utils.toBuffer(\"0x0\"))) {\n        tx.to = utils.setLengthLeft(buf, 20);\n      }\n    }\n\n    return tx;\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: true,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    callback(response.error ? err : null, response);\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper list of RPC methods which execute code and respond with a transaction hash as their result\nlet transactionMethods = [\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"];\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.indexOf(request.method) !== -1;\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = crypto.randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(crypto.randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = crypto.randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || crypto.randomBytes(32);\n  var iv = opts.iv || crypto.randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || crypto.randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.sha3(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext, 'hex');\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.sha3(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar Database = require(\"./database\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar VM = require(\"ethereumjs-vm\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar EventEmitter = require(\"events\");\nvar _ = require(\"lodash\");\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.database = new Database(options);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.pending_transactions = [];\n\n  // tracks latest state root as latest block changes\n  this._latestStateRoot = undefined;\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  allowUnlimitedContractSize: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.getVM = function getVM(root) {\n  const self = this;\n\n  let vm = new VM({\n    state: this.getStateTrie(root),\n    blockchain: {\n      // EthereumJS VM needs a blockchain object in order to get block information.\n      // When calling getBlock() it will pass a number that's of a Buffer type.\n      // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n      // represent block numbers as well as block hashes. Since it's very unlikely\n      // any block number will get higher than the maximum safe Javascript integer,\n      // we can convert this buffer to a number ahead of time before calling our\n      // own getBlock(). If the conversion succeeds, we have a block number.\n      // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n      getBlock: function(number, done) {\n        try {\n          number = to.number(number);\n        } catch (e) {\n          // Do nothing; must be a block hash.\n        }\n\n        self.getBlock(number, done);\n      }\n    },\n    enableHomestead: true,\n    activatePrecompiles: true,\n    allowUnlimitedContractSize: this.options.allowUnlimitedContractSize\n  });\n\n  if (this.options.debug === true) {\n    // log executed opcodes, including args as hex\n    vm.on(\"step\", function(info) {\n      var name = info.opcode.name;\n      var argsNum = info.opcode.in;\n      if (argsNum) {\n        var args = info.stack\n          .slice(-argsNum)\n          .map((arg) => to.hex(arg))\n          .join(\" \");\n\n        self.logger.log(`${name} ${args}`);\n      } else {\n        self.logger.log(name);\n      }\n    });\n  }\n\n  return vm;\n};\n\nBlockchainDouble.prototype.getLatestStateRoot = function getLatestStateRoot(callback) {\n  return this._latestStateRoot;\n};\n\nBlockchainDouble.prototype.getStateTrie = function getStateTrie(root) {\n  return new Trie(this.database.trie_db, root);\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  self.database.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      const vm = self.getVM();\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        async.eachSeries(\n          accounts,\n          function(accountData, finished) {\n            self.putAccount(accountData.account, accountData.address, vm, finished);\n          },\n          function(err) {\n            if (err) {\n              return callback(err);\n            }\n\n            block.header.stateRoot = vm.stateManager.trie.root;\n\n            // Create first block\n            self.putBlock(block, [], [], callback);\n          }\n        );\n      });\n    });\n  });\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.database.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.database.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.database.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.database.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.database.blocks.first(callback);\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  this.database.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.database.blocks.push.bind(self.database.blocks, block),\n      self.database.blockLogs.push.bind(self.database.blockLogs, logs),\n      self.database.blockHashes.set.bind(\n        self.database.blockHashes,\n        to.hex(block.hash()),\n        length\n      )\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.txHash(tx);\n      requests.push(\n        self.database.transactions.set.bind(\n          self.database.transactions,\n          txHash,\n          tx\n        ),\n        self.database.transactionReceipts.set.bind(\n          self.database.transactionReceipts,\n          txHash,\n          receipts[index]\n        )\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n        self._latestStateRoot = block.header.stateRoot;\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.database.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    // update latest stateRoot before actually deleting to avoid race conditions\n    self.getBlock(block.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (parent == null) {\n        return callback(new Error(\"Tried to pop genesis block, not allowed.\"));\n      }\n\n      var requests = [];\n      var blockHash = to.hex(block.hash());\n\n      block.transactions.forEach(function(tx) {\n        var txHash = to.txHash(tx);\n\n        requests.push(\n          self.database.transactions.del.bind(\n            self.database.transactions,\n            txHash\n          ),\n          self.database.transactionReceipts.del.bind(\n            self.database.transactionReceipts,\n            txHash\n          )\n        );\n      });\n\n      requests.push(\n        self.database.blockLogs.pop.bind(\n          self.database.blockLogs\n        ),\n        self.database.blockHashes.del.bind(\n          self.database.blockHashes,\n          blockHash\n        ),\n        self.database.blocks.pop.bind(\n          self.database.blocks\n        ) // Do this one last in case anything relies on it.\n      );\n\n      async.series(requests, function(err) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, block);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\nBlockchainDouble.prototype.putAccount = function(account, address, vm, callback) {\n  var self = this;\n\n  address = utils.toBuffer(address);\n  if (typeof vm === \"function\") {\n    callback = vm;\n    vm = null;\n  }\n\n  function _putAccount(vm) {\n    vm.stateManager.putAccount(address, account, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      vm.stateManager.cache.flush(callback);\n    });\n  }\n\n  if (vm) {\n    _putAccount(vm);\n  } else {\n    let stateRoot = this.getLatestStateRoot();\n    vm = self.getVM(stateRoot);\n    _putAccount(vm);\n  }\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    // Ensure we have the right block number for the VM.\n    block.header.number = to.hex(parentNumber + 1);\n\n    // Set the timestamp before processing txs\n    block.header.timestamp = to.hex(self.currentTime());\n\n    if (parent != null) {\n      block.header.parentHash = to.hex(parent.hash());\n    }\n\n    // temporarily set the new block's state root to the parent's\n    // will be updated by processBlock\n    if (self._latestStateRoot) {\n      block.header.stateRoot = self._latestStateRoot;\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  const self = this;\n  var nonce = null;\n\n  this.pending_transactions.forEach(function(tx) {\n    // tx.from and address are buffers, so cannot simply do\n    // tx.from==address\n    if (to.hex(tx.from) !== to.hex(address)) {\n      return;\n    }\n\n    var pendingNonce = to.number(tx.nonce) || 0;\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce > nonce) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, Buffer.from([nonce + 1]));\n  }\n\n  let stateRoot = this.getLatestStateRoot();\n  const stateTrie = self.getStateTrie(stateRoot);\n  stateTrie.get(address, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = to.hex(tx.from);\n    if (sortedByNonce[from]) {\n      sortedByNonce[from].push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = to.hex(best.from);\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  var self = this;\n  let vm;\n\n  var cleanUpAndReturn = function(err, result) {\n    vm.stateManager.revert(function(revertErr) {\n      if (err) {\n        return callback(err);\n      }\n      if (revertErr) {\n        return callback(revertErr);\n      }\n      callback(null, result);\n    });\n  };\n\n  var runCall = function(tx, err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    vm = self.getVM(block.header.stateRoot);\n\n    // create a fake block with this fake transaction\n    self.createBlock(block, function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n      block.transactions.push(tx);\n\n      // We checkpoint here for speed. We want all state trie reads/writes to happen in memory,\n      // and the final output be flushed to the database at the end of transaction processing.\n      vm.stateManager.checkpoint();\n\n      var runArgs = {\n        tx: tx,\n        block: block,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      vm.runTx(runArgs, function(vmerr, result) {\n        // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n        if (vmerr && vmerr instanceof Error === false) {\n          vmerr = new Error(\"VM error: \" + vmerr);\n        }\n\n        // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n        if (vmerr) {\n          return cleanUpAndReturn(vmerr);\n        }\n\n        // If no error, check for a runtime error. This can return null if no runtime error.\n        vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n        cleanUpAndReturn(vmerr, result);\n      });\n    });\n  };\n\n  // Delegate block selection\n  blockNumber === \"latest\"\n    ? self.latestBlock(runCall.bind(null, tx))\n    : self.getBlock(blockNumber, runCall.bind(null, tx));\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {VM} vm Optional VM instance to use to process the block. If null, processBlock\n * gets its own VM instance from the stateManager.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = function(block, commit, vm, callback) {\n  var self = this;\n\n  vm = vm || self.getVM(block.header.stateRoot);\n\n  // We checkpoint here for speed. We want all state trie reads/writes to happen in memory,\n  // and the final output be flushed to the database at the end of transaction processing.\n  vm.stateManager.checkpoint();\n\n  var cleanup = function(err) {\n    vm.stateManager.revert(function(e) {\n      callback(err || e);\n    });\n  };\n\n  vm.runBlock(\n    {\n      block: block,\n      generate: true\n    },\n    function(vmerr, results) {\n      // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n      if (vmerr && vmerr instanceof Error === false) {\n        vmerr = new Error(\"VM error: \" + vmerr);\n      }\n\n      // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n      if (vmerr) {\n        return cleanup(vmerr);\n      }\n\n      // If no error, check for a runtime error. This can return null if no runtime error.\n      vmerr = RuntimeError.fromResults(block.transactions, results);\n\n      // Note, even if we have an error, some transactions may still have succeeded.\n      // Process their logs if so, returning the error at the end.\n\n      var logs = [];\n      var receipts = [];\n\n      var totalBlockGasUsage = 0;\n\n      results.results.forEach(function(result) {\n        totalBlockGasUsage += to.number(result.gasUsed);\n      });\n\n      block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n      for (var v = 0; v < results.receipts.length; v++) {\n        var result = results.results[v];\n        var receipt = results.receipts[v];\n        var tx = block.transactions[v];\n        var txHash = to.txHash(tx, true);\n        var txLogs = [];\n\n        // Only process the transaction's logs if it didn't error.\n        if (result.vm.exception === 1) {\n          for (var i = 0; i < receipt.logs.length; i++) {\n            var receiptLog = receipt.logs[i];\n            var address = to.hex(receiptLog[0]);\n            var topics = [];\n\n            for (var j = 0; j < receiptLog[1].length; j++) {\n              topics.push(to.hex(receiptLog[1][j]));\n            }\n\n            var data = to.hex(receiptLog[2]);\n\n            var log = new Log({\n              logIndex: to.hex(i),\n              transactionIndex: to.hex(v),\n              transactionHash: txHash,\n              block: block,\n              address: address,\n              data: data,\n              topics: topics,\n              type: \"mined\"\n            });\n\n            logs.push(log);\n            txLogs.push(log);\n          }\n        }\n\n        let rcpt = new Receipt(\n          tx,\n          block,\n          txLogs,\n          result.gasUsed.toArrayLike(Buffer),\n          receipt.gasUsed,\n          result.createdAddress,\n          receipt.status,\n          to.hex(result.bloom.bitvector)\n        );\n        receipts.push(rcpt);\n      }\n\n      function commmitIfNeeded(cb) {\n        if (commit === true) {\n          vm.stateManager.commit(function(e) {\n            if (e) {\n              return cleanup(e);\n            }\n\n            block.header.stateRoot = vm.stateManager.trie.root;\n\n            // Put that block on the end the chain\n            self.putBlock(block, logs, receipts, cb);\n          });\n        } else {\n          vm.stateManager.revert(cb);\n        }\n      }\n\n      commmitIfNeeded(function(e) {\n        if (e) {\n          return callback(e);\n        }\n        // Note we return the vm err here too, if it exists.\n        callback(vmerr, block.transactions, results);\n      });\n    }\n  );\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.database.blocks.last(function(err, last) {\n        if (err) {\n          return callback(err);\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    // Process the block, committing the block to the chain\n    self.processBlock(block, true, null, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Rerun every transaction in that block prior to and including the requested transaction\n *  3. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = function(hash, params, callback) {\n  var self = this;\n  var targetHash = to.hex(hash);\n  var txHashCurrentlyProcessing = \"\";\n  var txCurrentlyProcessing = null;\n  var vm;\n\n  var storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  var returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    var gasLeft = to.number(event.gasLeft);\n    var totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    var gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    var isMemoryEnabled = !params.disableMemory;\n    var memory = null;\n    if (isMemoryEnabled) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        var lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    var stack;\n    if (params.disableStack) {\n      stack = null;\n    } else {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    var structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, vm, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  function beforeTxListener(tx) {\n    txCurrentlyProcessing = tx;\n    txHashCurrentlyProcessing = to.txHash(tx);\n    if (txHashCurrentlyProcessing === targetHash) {\n      vm.on(\"step\", stepListener);\n    }\n  }\n\n  // afterTxListener cleans up everything.\n  function afterTxListener() {\n    if (txHashCurrentlyProcessing === targetHash) {\n      vm.removeListener(\"step\", stepListener);\n      vm.removeListener(\"beforeTx\", beforeTxListener);\n      vm.removeListener(\"afterTx\", afterTxListener);\n    }\n  }\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    var targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(to.rpcDataHexString(targetBlock.header.parentHash), function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      // #2 - get VM at original block's stateRoot\n      vm = self.getVM(parent.header.stateRoot);\n      // Listen to beforeTx and afterTx so we know when our target transaction\n      // is processing. These events will add the vent listener for getting the trace data.\n      vm.on(\"beforeTx\", beforeTxListener);\n      vm.on(\"afterTx\", afterTxListener);\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.txHash(tx) === targetHash) {\n            break;\n          }\n        }\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(block, false, vm, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // Just to be safe\n          vm.removeListener(\"beforeTx\", beforeTxListener);\n          vm.removeListener(\"afterTx\", afterTxListener);\n          vm.removeListener(\"step\", stepListener);\n\n          // #5 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, vm, callback) {\n  var name = event.opcode.name;\n\n  var argsNum = event.opcode.in;\n  var args = event.stack.slice(-argsNum).map((arg) => to.hex(arg));\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      key = to.rpcDataHexString(args[1], 64).replace(\"0x\", \"\");\n      value = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n      callback(null, structLog);\n      // assign after callback because this storage change actually takes\n      // effect _after_ this opcode executes\n      storageStack.stack[storageStack.currentDepth][key] = value;\n      break;\n    case \"SLOAD\":\n      // this one's more fun, we need to get the value the contract is loading from current storage\n      key = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n\n      vm.stateManager.getContractStorage(event.address, \"0x\" + key, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n        storageStack.stack[storageStack.currentDepth][key] = value;\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n        callback(null, structLog);\n      });\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(trie, address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = address;\n    address = trie;\n    trie = null;\n  }\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!trie) {\n      trie = self.getStateTrie(block.header.stateRoot);\n    }\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.exists = !!data;\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.getStateTrie(block.header.stateRoot);\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.getStateTrie(block.header.stateRoot);\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.database.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.database.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.database.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.database.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.close = function(callback) {\n  this.database.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"level-sublevel\");","var to = require(\"../utils/to\");\nvar utils = require(\"ethereumjs-util\");\nvar FakeTransaction = require(\"ethereumjs-tx/fake.js\");\nvar Transaction = require(\"ethereumjs-tx\");\n\nmodule.exports = {\n  encode: function(tx, done) {\n    var encoded = tx.toJSON(true);\n\n    encoded.from = to.hex(tx.from);\n    encoded.hash = to.txHash(tx);\n\n    encoded._isRawTx = tx._isRawTx;\n\n    done(null, encoded);\n  },\n  decode: function(json, done) {\n    // TODO: We can't use txhelper here because there are two\n    // JSON serialization types: ethereumjs-tx, and web3.\n    // Here we deserialize from ethereumjs-tx because it's\n    // closer to the metal, so to speak.\n    const options = {\n      nonce: utils.toBuffer(json.nonce),\n      value: utils.toBuffer(json.value),\n      to: utils.toBuffer(json.to),\n      from: utils.toBuffer(json.from),\n      gasLimit: utils.toBuffer(json.gasLimit),\n      gasPrice: utils.toBuffer(json.gasPrice),\n      data: utils.toBuffer(json.data),\n      v: utils.toBuffer(json.v),\n      r: utils.toBuffer(json.r),\n      s: utils.toBuffer(json.s)\n    };\n\n    let tx = json._isRawTx ? new Transaction(options) : new FakeTransaction(options);\n\n    // if (to.hex(tx.hash()) != json.hash) {\n    //   return done(new Error(\"DB consistency check: Decoded transaction hash didn't match encoded hash.\n    //   Expected: \" + json.hash + \"; actual: \" + to.hex(tx.hash())));\n    // }\n\n    done(null, tx);\n  }\n};\n","module.exports = require(\"merkle-patricia-tree\");","var to = require(\"./to\");\nvar txhelper = require(\"./txhelper\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return txhelper.toJSON(tx, block);\n        } else {\n          return to.txHash(tx);\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar txhelper = require(\"../utils/txhelper\");\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err.message && err.message.indexOf(\"index out of range\") >= 0) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, 0);\n      }\n      return callback(err);\n    }\n    callback(null, block.transactions.length);\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      result = txhelper.toJSON(receipt.tx, receipt.block);\n    }\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = txhelper.toJSON(tx, block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err && err.message && err.message.indexOf(\"index out of range\") >= 0) {\n      err = new Error(\"Unknown block number\");\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  this.state.queueRawTransaction(rawTx, callback);\n};\n\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback); // :(\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.sha3(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\nGethApiDouble.prototype.evm_mine = function(timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar FakeTransaction = require(\"ethereumjs-tx/fake.js\");\nvar Transaction = require(\"ethereumjs-tx\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(rawTx, callback) {\n  var data = Buffer.from(utils.stripHexPrefix(rawTx), \"hex\");\n\n  var tx = new Transaction(data);\n  var txParams = {\n    from: tx.from.toString(\"hex\"),\n    to: tx.to.toString(\"hex\"),\n    gas: tx.gasLimit.toString(\"hex\"),\n    gasPrice: tx.gasPrice.toString(\"hex\"),\n    value: tx.value.toString(\"hex\"),\n    data: tx.data.toString(\"hex\"),\n    nonce: tx.nonce.toString(\"hex\")\n  };\n\n  if (tx.v && tx.v.length > 0 && tx.r && tx.r.length > 0 && tx.s && tx.s.length > 0) {\n    txParams.v = tx.v.toString(\"hex\");\n    txParams.r = tx.r.toString(\"hex\");\n    txParams.s = tx.s.toString(\"hex\");\n  }\n\n  this.queueTransaction(\"eth_sendRawTransaction\", txParams, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txParams, blockNumber, callback) {\n  if (txParams.from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  txParams.from = utils.addHexPrefix(txParams.from).toLowerCase();\n\n  if (\n    method === \"eth_sendTransaction\" &&\n    this.accounts[txParams.from] == null &&\n    this.unlocked_accounts[txParams.from] == null\n  ) {\n    return callback(new TXRejectedError(\"sender account not recognized\"));\n  }\n\n  if (method === \"eth_sendTransaction\" && this.unlocked_accounts[txParams.from] == null) {\n    return callback(new TXRejectedError(\"signer account is locked\"));\n  }\n\n  var rawTx = {\n    gasPrice: \"0x1\",\n    gasLimit: to.hex(this.blockchain.defaultTransactionGasLimit),\n    value: \"0x0\"\n  };\n\n  if (txParams.gas != null) {\n    rawTx.gasLimit = utils.addHexPrefix(txParams.gas);\n  }\n\n  if (txParams.gasPrice != null) {\n    rawTx.gasPrice = utils.addHexPrefix(txParams.gasPrice);\n  } else {\n    rawTx.gasPrice = this.gasPriceVal;\n  }\n\n  if (txParams.to != null) {\n    rawTx.to = utils.addHexPrefix(txParams.to);\n  }\n\n  if (txParams.value != null) {\n    rawTx.value = utils.addHexPrefix(txParams.value);\n  }\n\n  if (txParams.data != null) {\n    rawTx.data = utils.addHexPrefix(txParams.data);\n  }\n\n  if (txParams.nonce != null) {\n    rawTx.nonce = utils.addHexPrefix(txParams.nonce);\n  }\n\n  if (txParams.v != null && txParams.s != null && txParams.v != null) {\n    rawTx.v = utils.addHexPrefix(txParams.v);\n    rawTx.r = utils.addHexPrefix(txParams.r);\n    rawTx.s = utils.addHexPrefix(txParams.s);\n  }\n\n  // some tools use a null or empty `to` field when doing contract deployments\n  if (rawTx.to === \"0x0\" || rawTx.to === \"\") {\n    delete rawTx.to;\n  }\n\n  // Error checks\n  if (rawTx.to && typeof rawTx.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (to.number(rawTx.gasLimit) > to.number(this.blockchain.blockGasLimit)) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  // Get the nonce for this address, taking account any transactions already queued.\n  var self = this;\n  var address = utils.toBuffer(txParams.from);\n\n  // we don't call createTransactionWithCorrectNonce here because then we'd need to worry\n  // about nonce calculation for the items pending in the action_queue.\n  // Instead, we simply create a `FakeTransaction` and bail on validation\n  // errors so that we fail fast when we have bad tx input\n\n  try {\n    let tx = new FakeTransaction(rawTx);\n    tx.from = address;\n  } catch (err) {\n    return callback(err);\n  }\n\n  self.action_queue.push({\n    method: method,\n    from: txParams.from,\n    tx: rawTx,\n    callback: callback,\n    blockNumber: blockNumber\n  });\n\n  // We know there's work, so get started.\n  self.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = Buffer.from(dataToSign.replace(\"0x\", \"\"), \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  return utils.toRpcSig(sgn.v, sgn.r, sgn.s);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.txHash(tx);\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, rawTx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(rawTx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.vm.return) {\n        result = to.hex(results.vm.return);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processGasEstimate = function(from, rawTx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(rawTx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = results.gasRefund ? to.hex(results.gasUsed.add(results.gasRefund)) : to.hex(results.gasUsed);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processTransaction = function(from, rawTx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(rawTx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.txHash(tx);\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  // Convert from hex.\n  snapshotId = utils.bufferToInt(snapshotId);\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length) {\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    callback();\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    callback();\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && callback();\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(rawTx, from, callback) {\n  const self = this;\n  self.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    var tx;\n    if (rawTx.hasOwnProperty(\"v\") && rawTx.hasOwnProperty(\"r\") && rawTx.hasOwnProperty(\"s\")) {\n      tx = new Transaction(rawTx);\n      tx._isRawTx = true;\n    } else {\n      tx = new FakeTransaction(rawTx);\n      tx._isRawTx = false;\n    }\n    tx.from = from;\n\n    // If the user specified a nonce, use that instead.\n    if (rawTx.nonce == null) {\n      // account for transactions waiting in the tx queue\n      tx.nonce = to.hex(expectedNonce);\n    } else {\n      if (!tx.nonce.equals(expectedNonce)) {\n        const expected = to.number(expectedNonce);\n        const actual = to.number(tx.nonce);\n        return callback(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    }\n    callback(null, tx);\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    levelup(\n      self.options.db || encode(cachedown(directory, filedown).maxSize(100)),\n      { valueEncoding: \"json\" },\n      finishInitializing\n    );\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs,\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","module.exports = require(\"ethereumjs-vm\");","module.exports = require(\"heap\");","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar async = require(\"async\");\nvar txhelper = require(\"./txhelper.js\");\nvar BN = require(\"bn.js\");\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n  this.forkVersion = null;\n\n  if (typeof this.fork === \"string\") {\n    if (this.fork.indexOf(\"@\") >= 0) {\n      var split = this.fork.split(\"@\");\n      this.fork = split[0];\n      this.forkBlockNumber = parseInt(split[1]);\n    }\n\n    this.fork = new Web3.providers.HttpProvider(this.fork);\n  }\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback();\n    });\n  });\n};\n\nForkedBlockchain.prototype.getVM = function getVM(root) {\n  let vm = BlockchainDouble.prototype.getVM.call(this, root);\n\n  // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n  vm.stateManager._lookupStorageTrie = this.lookupStorageTrie.bind(this, vm.stateManager.trie);\n  vm.stateManager.cache._lookupAccount = this._getAccount.bind(this, vm.stateManager.trie);\n  vm.stateManager.getContractCode = this._getCode.bind(this, vm.stateManager.trie);\n  vm.stateManager.putContractCode = this._putCode.bind(this, vm);\n\n  return vm;\n};\n\nForkedBlockchain.prototype.getStateTrie = function(root) {\n  return new ForkedStorageTrie(this.database.trie_db, root, {\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber,\n    blockchain: this\n  });\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = to.hex(json.number);\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.createForkedStorageTrie = function(stateTrie, address) {\n  address = to.hex(address);\n\n  var trie = new ForkedStorageTrie(this.database.trie_db, null, {\n    address: address,\n    stateTrie,\n    blockchain: this,\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber\n  });\n\n  this.storageTrieCache[address] = trie;\n\n  return trie;\n};\n\nForkedBlockchain.prototype.lookupStorageTrie = function(stateTrie, address, callback) {\n  address = to.hex(address);\n\n  if (this.storageTrieCache[address] != null) {\n    return callback(null, this.storageTrieCache[address]);\n  }\n\n  callback(null, this.createForkedStorageTrie(stateTrie, address));\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  return (typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42) ||\n    (Buffer.isBuffer(value) && value.length >= 32);\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  self.database.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  // This function sometimes gets passed hex values that aren't long enough to\n  // be a block hash. In that case, let's convert them to a big number so Web3\n  // doesn't get stopped up.\n  if (typeof numberOrHash === \"string\" && numberOrHash.length < 66) {\n    numberOrHash = self.web3.utils.toBN(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb();\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(txhelper.fromJSON(txJson));\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  const self = this;\n\n  if (self.isBlockHash(number)) {\n    self.isFallbackBlockHash(number, function(err, isFallbackBlockHash) {\n      if (err) {\n        return callback(err);\n      }\n      if (isFallbackBlockHash) {\n        return self.getFallbackBlock(number, callback);\n      } else {\n        return BlockchainDouble.prototype.getBlock.call(self, number, callback);\n      }\n    });\n  } else {\n    self.isFallbackBlock(number, function(err, isFallbackBlock) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (isFallbackBlock) {\n        return self.getFallbackBlock(number, callback);\n      } else {\n        // If we don't have string-based a block hash, turn what we do have into a number\n        // before sending it to getBlock.\n        self.getRelativeBlockNumber(number, function(err, blockReference) {\n          if (err) {\n            return callback(err);\n          }\n\n          BlockchainDouble.prototype.getBlock.call(self, blockReference, callback);\n        });\n      }\n    });\n  }\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  // TODO - get by block\n  let stateTrie = this.getStateTrie(this.getLatestStateRoot());\n  this.lookupStorageTrie(stateTrie, address, function(err, trie) {\n    if (err) {\n      return callback(err);\n    }\n    trie.get(key, callback);\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  let stateTrie = this.getStateTrie(this.getLatestStateRoot());\n  this._getCode(stateTrie, address, number, callback);\n};\n\nForkedBlockchain.prototype._getCode = function(stateTrie, address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        // Else, we need to fetch it from web3. If our number is greater than\n        // the fork, let's just use \"latest\".\n        if (number > to.number(self.forkBlockNumber)) {\n          number = \"latest\";\n        }\n\n        self.fetchCodeFromFallback(address, number, function(err, code) {\n          if (code) {\n            code = utils.toBuffer(code);\n          }\n          callback(err, code);\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype._putCode = function(vm, address, value, callback) {\n  // This is a bit of a hack. We need to bypass the vm's\n  // _lookupAccount call that vm.stateManager.putContractCode() uses.\n  // This means we have to do some things ourself. The last call\n  // to self.stateTrie.put() at the bottom is important because\n  // we can't just be satisfied putting it in the cache.\n\n  vm.stateManager.cache.flush(() => {\n    address = utils.toBuffer(address);\n    vm.stateManager.trie.get(address, function(err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n      account.setCode(vm.stateManager.trie, value, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        vm.stateManager.trie.put(address, account.serialize(), function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          // Ensure the cache updates as well.\n          vm.stateManager.putAccount(address, account, callback);\n        });\n      });\n    });\n  });\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  let stateTrie = this.getStateTrie(this.getLatestStateRoot());\n  this._getAccount(stateTrie, address, number, callback);\n};\n\nForkedBlockchain.prototype._getAccount = function(stateTrie, address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, stateTrie, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = txhelper.fromJSON(result);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      account.exists = code !== \"0x\" || balance !== \"0x0\" || nonce !== \"0x0\";\n\n      let stateTrie = self.getStateTrie(self.getLatestStateRoot());\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype._checkpointTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._checkpointTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n    trie.customCheckpoint();\n  });\n};\n\nForkedBlockchain.prototype._revertTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._revertTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n\n    // We're trying to revert to a point before this trie was created.\n    // Let's just remove the trie.\n    if (trie.checkpoints.length === 0) {\n      delete self.storageTrieCache[address];\n    } else {\n      trie.customRevert();\n    }\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","var MerklePatriciaTree = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageTrie, MerklePatriciaTree);\n\nfunction ForkedStorageTrie(db, root, options) {\n  MerklePatriciaTree.call(this, db, root);\n\n  this.address = options.address;\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n\n  this.blockchain = options.blockchain;\n\n  this.web3 = new Web3();\n  this.web3.setProvider(this.fork);\n\n  this.checkpoints = [];\n}\n\nForkedStorageTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n\n  this.findPath(key, function(err, node, remainder, stack) {\n    var exists = false;\n    if (node && remainder.length === 0) {\n      exists = true;\n    }\n    callback(err, exists);\n  });\n};\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = self.forkBlockNumber;\n  }\n\n  // For geth; https://github.com/ethereumjs/ethereumjs-util/issues/79\n  blockNumber = to.rpcQuantityHexString(blockNumber);\n\n  key = utils.toBuffer(key);\n\n  // If the account doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      // If this is the main trie, get the whole account.\n      if (self.address == null) {\n        self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, account.serialize());\n        });\n      } else {\n        self.web3.eth.getStorageAt(to.hex(self.address), to.hex(key), blockNumber, function(err, value) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = utils.toBuffer(value);\n          value = utils.rlp.encode(value);\n\n          callback(null, value);\n        });\n      }\n    }\n  });\n};\n\n// I don't want checkpoints to be removed by commits.\n// Note: For some reason, naming this function checkpoint()\n// -- overriding the default function -- prevents it from\n// being called.\nForkedStorageTrie.prototype.customCheckpoint = function() {\n  this.checkpoints.push(this.root);\n};\n\nForkedStorageTrie.prototype.customRevert = function() {\n  this.root = this.checkpoints.pop();\n};\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"web3-core\");","module.exports = require(\"web3-eth\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"web3-utils\");","module.exports = require(\"bn.js\");","module.exports = require(\"eth-sig-util\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var WebSocketServer = require(\"websocket\").server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    try {\n      var payload = JSON.parse(message.utf8Data);\n    } catch (e) {\n      connection.reject(400, \"Bad Request\");\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        delete self.connections[connection.id].subscriptions[payload.params[0]];\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  this.connectionsBySubscriptionId[notification.params.subscription].connection.send(JSON.stringify(notification));\n};\n","module.exports = require(\"websocket\");","var http = require(\"http\");\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        var headers = {\n          \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept, User-Agent\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"*\"\n        };\n\n        switch (method) {\n          case \"OPTIONS\":\n            headers[\"Content-Type\"] = \"text/plain\";\n            response.writeHead(200, headers);\n            response.end(\"\");\n            break;\n          case \"POST\":\n            // console.log(\"Request coming in:\", body);\n\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              response.writeHead(400, headers);\n              response.end(\"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              response.writeHead(200, headers);\n              response.end(JSON.stringify(result));\n            });\n\n            break;\n          default:\n            response.writeHead(400, {\n              \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept, User-Agent\",\n              \"Access-Control-Allow-Origin\": \"*\",\n              \"Access-Control-Allow-Methods\": \"*\",\n              \"Content-Type\": \"text/plain\"\n            });\n            response.end(\"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}